class Solution {
public:
void setZeroes(vector<vector<int>>& matrix) {
  int col0 = 1, rows = matrix.size(), columns = matrix[0].size();
    
    //make zero in first row and column if zero is present in matrix rows and columns
  
    for (int i = 0; i < rows; i++) {
    if (matrix[i][0] == 0) col0 = 0;
    for (int j = 1; j < columns; j++) {
      if (matrix[i][j] == 0) {
        matrix[i][0] = 0;
        matrix[0][j] = 0;
      }
    }
  }
        
  //traversing in the reverse direction and make zero

  for (int i = rows - 1; i >= 0; i--) {
    for (int j = columns - 1; j >= 1; j--) {
      if (matrix[i][0] == 0 || matrix[0][j] == 0) {
        matrix[i][j] = 0;
      }
    }
    if (col0 == 0) {
      matrix[i][0] = 0;
    }

  }
}    

};


//Time Complexity: O(2*(N*M)), as we are traversing two times in a matrix,

//Space Complexity: O(1).
